//User function Template for C++

class Solution {
  public:
  int solve(int A[], int B[], int N, int M, int i, int j)
  {
      //base case
      if(i==N || j==M)
      {
          return 0;
      }
      int ans=0;
      if(A[i]==B[j])
      {
          ans=1+solve(A,B,N,M,i+1,j+1);
      }
      else
      {
          ans=max(solve(A,B,N,M,i+1,j),solve(A,B,N,M,i,j+1));
      }
      return ans;
  }
  
  //memorization
   int solveMem(int A[], int B[], int N, int M, int i, int j,vector<vector<int>> &dp)
  {
      //base case
      if(i==N || j==M)
      {
          return 0;
      }
      //3.
      if(dp[i][j]!=-1)
      {
          return dp[i][j];
      }
      int ans=0;
      if(A[i]==B[j])
      {
          ans=1+solveMem(A,B,N,M,i+1,j+1,dp);
      }
      else
      {
          ans=max(solveMem(A,B,N,M,i+1,j,dp),solveMem(A,B,N,M,i,j+1,dp));
      }
      //2.
      dp[i][j]=ans;
      return ans;
  }
  
  
     int LCS(vector<int> co){
       vector<int>lcs;
       
       for(int i=0;i<co.size();i++){
           auto j=lower_bound(lcs.begin(),lcs.end(),co[i]);
           if(j!=lcs.end()){
              *j=co[i]; 
           }
           else{
               lcs.push_back(co[i]);
           }
           
       }
       return lcs.size();
   }
    int minInsAndDel(int A[], int B[], int N, int M) {
        // code here
        //1.
       /* vector<vector<int>> dp(N+1, vector<int>(M+1,-1));
        int res=solveMem(A,B,N,M,0,0,dp);
        int  ans1=N-res;
        int ans2=M-res;
        int ans=ans1+ans2;
        return ans;*/
           vector<int>co;
       unordered_set<int>s;
       for(int i=0;i<M;i++){
           s.insert(B[i]);
       }
       for(int i=0;i<N;i++){
           if(s.find(A[i])!=s.end()){
               co.push_back(A[i]);
           }
           
       }
       return N+M-(2*LCS(co));
   
    }
};
