//User function template for C++
class Solution{
public:
	int AreAll9s(int *num, int n) {
	    int i;
	    for (i = 0; i < n; ++i)
	        if (num[i] != 9) return 0;
	    return 1;
	}
public:
	void generateNextPalindromeUtil(int num[], int n) {
	    int mid = n / 2;
	    bool leftSmaller = false;
	    int i = mid - 1;
	    int j = (n % 2) ? mid + 1 : mid;
	    while (i >= 0 && num[i] == num[j]) i--, j++;
	    if (i < 0 || num[i] < num[j]) leftSmaller = true;
	    while (i >= 0) {
	        num[j] = num[i];
	        j++;
	        i--;
	    }
	    if (leftSmaller == true) {
	        int carry = 1;
	        i = mid - 1;
	        if (n % 2 == 1) {
	            num[mid] += carry;
	            carry = num[mid] / 10;
	            num[mid] %= 10;
	            j = mid + 1;
	        } else
	            j = mid;
	        while (i >= 0) {
	            num[i] += carry;
	            carry = num[i] / 10;
	            num[i] %= 10;
	            num[j++] = num[i--];
	        }
	    }
	}

public:
	vector<int> generateNextPalindrome(int num[], int n) {
	    int i;
	    vector<int> ans;
	    if (AreAll9s(num, n)) {
	        ans.push_back(1);
	        for (i = 1; i < n; i++) ans.push_back(0);
	        ans.push_back(1);
	    }
	    else {
	        generateNextPalindromeUtil(num, n);
	        for (i = 0; i < n; i++) {
	            ans.push_back(num[i]);
	        }
	    }
	    return ans;
	}

};
